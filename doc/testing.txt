Correctness and performance testing are detailed here.

*******************************************************************************
** Correctness
*******************************************************************************

The types of correctness testing we do:
  * testnfs :: a C program that runs a set of tests against a server
  * write/read script test :: a script that writes a bunch of stuff,
    reads it back and compares it to the original

Future: once NFS is SMP capable, the stress tests should include
multiple clients.

*********************
`testnfs' setup:

 * windows: thor:
   - sshd must be running
   - make a directory c:/tmp/nfs.test and put a copy of some large
     file there and call it `nfstestfile'
   - NFS share e:/nfs.test as `nfs.test'
 * linux: freon:
   - make sure /home/tmp/layer/nfs.test exists and put a copy of the
     same `nfstestfile' there (via some means other than NFS)
   - make `testnfs'

Run the test:

    $ ./testnfs -l /home/tmp/layer/nfs.test -t /c/tmp/nfs.test thor \
      		/net/thor/nfs.test

The above causes the NFS share to be mounted, so take care when making
changes on the Windows side.

*********************
`bigfile-test.sh' setup:

 * make sure `nfsdir' and `localdir' definitions are correct -- they
   should be on unbacked up partitions

Run the test:

    $ test/bigfile-test.sh

`ERROR' will be printed and the program will exit with a non-zero exit
status in the case of failure.

*********************
`stress-test.sh' setup:

 * make sure `nfsdir' and `localdir' definitions are correct -- they
   should be on unbacked up partitions

Run the test:

    $ test/stress-test.sh number-of-iterations

In the case of failure an error message should be printed.

One interation takes about 1m.  Running for a few hours is a good
idea, so something like 

    $ test/stress-test.sh 240

*******************************************************************************
** Performance
*******************************************************************************

The following setup produces more stable results than anything found
so far:
 - VMware Fusion on a Mac Pro
   - aNFS server: Windows 7 x64 Enterprise
   - test client: Ubuntu 16.04
The test client cannot be run on Windows, because the test program
fails (it seems to be a	bug in Cygwin).

The following script, test/performance.sh, runs `hammernfs' in many
different combinations of block size (from 512 to 8192), NFS protocol
versions (2 & 3) and transport layers (tcp & udp).

Setup: put a 30M file into the NFS share "nfs.test" and:

  $ test/performance.sh results/$version

where $version is something like 6.3.0.rc1, etc.

Then, do "make results" to see how it stacks up against previous
versions.

If multiple versions are tested, then do this when one version is
finished testing:

 - uninstall old version
 - reboot
 - install new version
 - start task manager, performance tab and wait until the machine
   settles, then minimize the task manager

Now, run the tests on the client.  NOTE: the client machine is not
rebooted between runs.
