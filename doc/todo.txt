
*******************************************************************************
For the next major version, rethink the way file handles are
implemented:

Currently file handles and filename information are stored in the same
structure.  Hard links throw a wrench into this mechanism.

How about separate structures for directory and handle information?
This would be more like unix.  

What is the directory information used for anyway?  For mapping
filenames to file handles.  Would it be reasonable to make this
separate?  Pros/cons?  The current scheme is simple (without hard links).

Important needs:
mapping of file handle to a pathname.
A file handle with multiple links may have multiple pathnames. How do
we manage this?  At first it might seem that the name of the
"first" link could just be used.  However, if that file is deleted,
then subsequence operations will fail.  A possible workaround is to
keep a list of known pathnames and if a filename is unlinked from a
directory, update the list.  That's as good as any other methods being
used.  

*******************************************************************************
misc:
- sparse file support
- execute permissions issue (spr37568)

*******************************************************************************
--- older stuff ----

nsm: How long do we try sending state-change notifications?
nsm: How long do we try notify sending callbacks?
nlm: How long do we try sending NLM_GRANTED messages? Forever?

xdr and xdr users: Find all places where signed versus unsigned does
not matter and give preference to signed.  Really only need to look in
nfs.cl where performance is important.  It looks like I tended to use
xdr-int most of the time.  Verify that using xdr-int to store an
unsigned value doesn't present any problems (can't imagine why it
would.. but verify). nfs-xdr-fattr is probably a good candidate for
tweaking.

Possible feature: Add a mode where file handle information is
maintained on-disk (perhaps using allegrocache) so that the server can
be restarted without resulting in stale filehandles.  Clearly this
would have a performance impact, however, it's not clear yet how much
of an impact there would be.  The only times that it would impact are
when a haven't-seen-yet file is accessed or when a file is deleted.
The database will also grow indefinitely.  Some process to clean out
obsolete entries will be needed.

Related to the prior entry:  Just keep the export root file handles
stored on disk.  The on-disk file would only have to be updated when
exports are added or removed. This wouldn't prevent a stale file
handle situation for any files, but it would allow the primary mount
point to remain stable.  This might help some clients.

